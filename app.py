from flask import Flask, request, jsonify
import requests
import json
import gzip
import io
import os
import time

app = Flask(__name__)

API_TOKEN = "YXNwZWN0"
GZIP_CONTENT = None
LOAD_TIME = None

def load_gzip_index():
    global GZIP_CONTENT, LOAD_TIME
    
    print("üì• –ó–∞–≥—Ä—É–∂–∞—é –±–∞–∑—É —Å Dropbox...")
    start_time = time.time()
    
    dropbox_url = "https://www.dropbox.com/scl/fi/kxj0wuh6z3yqplb8qc42n/phone_index.json.gz?rlkey=y5gsvr81wel9vty1jodaqtc1b&st=y1zwvbme&dl=1"
    
    try:
        response = requests.get(dropbox_url, timeout=60)
        response.raise_for_status()
        
        print(f"üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(response.content) / (1024*1024):.1f} MB")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
        GZIP_CONTENT = response.content
        LOAD_TIME = time.time() - start_time
        print(f"‚úÖ –ë–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {LOAD_TIME:.1f} —Å–µ–∫!")
        
    except Exception as error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error}")
        GZIP_CONTENT = None

def search_in_gzip(phone_number):
    """
    –ò—â–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –≤ gzip –∞—Ä—Ö–∏–≤–µ –±–µ–∑ –ø–æ–ª–Ω–æ–π —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
    """
    if not GZIP_CONTENT:
        return None
    
    try:
        # –î–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—è –Ω–∞ –ª–µ—Ç—É
        compressed_data = io.BytesIO(GZIP_CONTENT)
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        with gzip.open(compressed_data, 'rt', encoding='utf-8') as file:
            buffer = ""
            for line in file:
                buffer += line
                
                # –ò—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ç–µ–∫—É—â–µ–º –±—É—Ñ–µ—Ä–µ
                phone_pattern = f'"{phone_number}"'
                if phone_pattern in buffer:
                    # –ù–∞—à–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å
                    start_idx = buffer.find(phone_pattern)
                    
                    # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –æ–±—ä–µ–∫—Ç–∞
                    obj_start = buffer.rfind('{', 0, start_idx)
                    if obj_start == -1:
                        continue
                    
                    # –ò—â–µ–º –∫–æ–Ω–µ—Ü –æ–±—ä–µ–∫—Ç–∞
                    obj_end = buffer.find('}', start_idx)
                    if obj_end == -1:
                        # –û–±—ä–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
                        continue
                    
                    obj_end += 1  # –í–∫–ª—é—á–∞–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                    
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º JSON –æ–±—ä–µ–∫—Ç
                        record_str = buffer[obj_start:obj_end]
                        record_data = json.loads(record_str)
                        
                        if phone_number in record_data:
                            return record_data[phone_number]
                    except json.JSONDecodeError:
                        continue
                    
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∞—Ä—Ö–∏–≤–µ: {e}")
        return None

def clean_phone(phone_str):
    digits = ''.join(filter(str.isdigit, phone_str))
    if len(digits) == 10:
        return '7' + digits
    elif len(digits) > 11:
        return digits[:11]
    return digits

@app.route('/')
def home():
    return "detail not found", 404

@app.route('/search', methods=['POST'])
def search_phone():
    if not request.json:
        return jsonify({"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è JSON"}), 400
    
    data = request.json
    phone_input = data.get('phone')
    token_input = data.get('token')
    
    if not phone_input or not token_input:
        return jsonify({"error": "–ù—É–∂–Ω—ã phone –∏ token"}), 400
    
    if token_input != API_TOKEN:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"}), 401
    
    if not GZIP_CONTENT:
        return jsonify({"error": "–ë–∞–∑–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"}), 503
    
    clean_number = clean_phone(phone_input)
    
    if len(clean_number) != 11:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞"}), 400
    
    start_time = time.time()
    record = search_in_gzip(clean_number)
    search_time = time.time() - start_time
    
    if record:
        return jsonify({
            "üì± –¢–µ–ª–µ—Ñ–æ–Ω": clean_number,
            "üë§ –§–ò–û": record.get('n', ''),
            "üìß Email": record.get('e', ''),
            "‚ö° –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞": f"{search_time:.3f} —Å–µ–∫"
        })
    else:
        return jsonify({
            "üì± –¢–µ–ª–µ—Ñ–æ–Ω": clean_number,
            "üí¨ –°—Ç–∞—Ç—É—Å": "–ù–µ –Ω–∞–π–¥–µ–Ω",
            "‚ö° –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞": f"{search_time:.3f} —Å–µ–∫"
        })

@app.route('/status')
def status():
    return jsonify({
        "status": "online" if GZIP_CONTENT else "loading",
        "memory_usage": f"{len(GZIP_CONTENT) / (1024*1024):.1f} MB" if GZIP_CONTENT else "0 MB"
    })

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É
load_gzip_index()

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
